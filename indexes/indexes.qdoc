/*
 * Copyright 2013+ Ruslan Nigmatullin <euroelessar@yandex.ru>
 *
 * This file is part of Elliptics.
 *
 * Elliptics is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Elliptics is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Elliptics.  If not, see <http://www.gnu.org/licenses/>.
 */


/*!
  \page secondary-indexes.html Secondary indexes
  \brief Support of secondary indexes in Elliptics

  \tableofcontents

  \section introduction Introduction

  Secondary indexes is an ability to add Elliptics' documents to secondary
  indexes for future searching them. Technically list of objects' identificators
  for certain secondary index is stored as one more data blob by special-key in
  Elliptics, that makes possible to store secondary indexes with the same reliability
  as any other user data. Also it's possible to store small amounts of data for all
  object-index pairs, it's extremly usefull for most of applicable tasks. Since
  secondary indexes were added to object it should be possible to find objects by
  them. Right now Elliptics provides two ways to find items by the secondary indexes:
  by AND (find all objects with all of provided indexes) and OR (find all objects
  with at least one of provided indexes) logic.

  \section api API

  Using of indexes is right easy. Examples are provided by synchronious implementaions
  for better readibility.

  \code{.cpp}
ioremap::elliptics::session sess = create_session();

std::vector<std::string> indexes = {
    "fast",
    "reliable",
    "distributed"
};

sess.update_indexes(id, indexes).wait();

// OR is data is needed

std::vector<index_entry> indexes = {
    { key("fast").raw_id(), data_pointer(...) },
    // whatever
};

sess.update_indexes(id, indexes).wait();
  \endcode

  Searching for objects:

  \code{.cpp}
ioremap::elliptics::session sess = create_session();
std::vector<std::string> indexes = { ... };
sync_find_indexes_result result = sess.find_all_indexes(indexes);
// sync_find_indexes_result result = sess.find_any_indexes(indexes);

for (auto it = result.begin(); it != result.end(); ++it) {
    find_indexes_result_entry entry = *it;

    entry.id; // Identificator of object by which it's possible to request data from Elliptics
    for (auto jt = entry.indexes.begin(); jt != entry.indexes.end(); ++jt) {
        auto index = *jt;

        index.first; // Index identificator, usually it's sha512 of index name
        index.second; // Data pointer which stores index-specific data for this index
    }
}
  \endcode

  \section capped Capped collections

  Since 2.25 Elliptics has support for capped collections based on secondary indexes
  implemenation. Capped collections are special indexes with limit of objects in it.

  To add object to capped collection just do the following:

  \code{.cpp}
ioremap::elliptics::session sess = create_session();
ioremap::elliptics::index_entry index;
std::string object;
sess.add_to_capped_collection(object, index,
    25, // limit
    true // remove data
    ).wait();
  \endcode

  \section impl Implemenation details

  \subsection secondary-indexes-impl Secondary indexes implemenation

  Technically secondary indexes are implemented as following:

  There are two different types of entries in storage:
  \li List of all objects of index
  \li List of all indexes of object

  Both of this lists are stored in the same way as list of pairs of entry's id and data specified for this
  index-object link. This lists are stored as msgpacked objects for purposes of binary compatibilty and
  future extensibility.

  As a lot of objects may be added to one index - index's list of objects is shared to the count specified
  by elliptics' configuration. Shard number is choosed by object's id (dnet_indexes_get_shard_id function)
  and is the same for all indexes, so certain object will always be in the same shard. First 32 bytes of
  shard's id are specified by shard's number. It's done to ensure that all object's related indexes' shards
  will be on the same machine, so find may be done localy for certain shard number.

  \attention Specifying different shards_count value for different server nodes in one elliptics network is
  undefined behaviour. Everything will be ruined and we can promise that all indexes' data will be corrupted.

  \subsubsection secondary-indexes-impl-find Find algorithm

  The logic of object's finding by indexes is the following: we send a request for every shard (requests are
  bulked if they should be send to the same node). As certain shard for every indexes is stored on one machine
  search may be done locally.

  Possible logics are AND and OR, they don't really differ in context of implemenation details. AND logic is
  implemented as follows:
  \li Load object's list of first index
  \li If it was the last index send result to client and exit
  \li Load object's list of next index
  \li Lineary get their intersection and drop any other objects
  \li Go to step 2

  \note All loaded lists are stored in memory during the whole operation for perfomance reasons (we don't want
  to allocate a lot of small objects so we just use light-weight ioremap::elliptics::data_pointer objects).

  \subsubsection set-indexes-impl Set indexes for object

  To set indexes for object we have to firstly check what indexes object already has. For that we have to do
  request to object's list of indexes. So indexes may be splitted to three categories: new indexes, updated
  indexes and removed indexes. Firstly we modify list of object's indexes, than we send internal requests
  to machine where shard of this object is stored.

  At each indexes's shard we look for this object and do needed operation (add/update it's data or remove it
  from the list). Result of each operation is sent back to the server where list of object's indexes is stored.
  That server replies the result of whole operation to the client.

  \subsubsection update-indexes-impl Update indexes for object

  Update indexes operation is mostly the same with that difference that we send set and internal requests
  independently from the client so there is no network activity between the servers. We can do this as we
  don't touch any indexes not provided by the method arguments. So this ioremap::elliptics::session::update_indexes
  is quite faster than ioremap::elliptics::session::set_indexes method.

  \subsubsection remove-indexes-impl Remove object from indexes

  Removing object from indexes looks very similiar with update indexes command. We also send requests independently
  and it also works a bit faster than ioremap::elliptics::session::set_indexes method.

  \subsubsection remove-index-impl Remove index

  This command is very heavy. I said that it is VERY HEAVY. To implement it we really do the following things:
  \li Send find request to find all object added to this index
  \li For each object removed from index we use ioremap::elliptics::session::remove_indexes

  Try not to use if it's possible, I mean it.

  \subsubsection capped-impl Capped collections

  Capped collections are fully compatible with secondary indexes so you are abel to use
  any of already existen methods for requesting the data and some for modifying:
  \li ioremap::elliptics::session::remove_index
  \li ioremap::elliptics::session::remove_indexes
  \li ioremap::elliptics::session::list_indexes
  \li ioremap::elliptics::session::find_all_indexes
  \li ioremap::elliptics::session::find_any_indexes

  For adding elements to capped collection use ioremap::elliptics::session::add_to_capped_collection.

  Internally it's implemented as ioremap::elliptics::session::set_indexes with specially set flag:
  \li Client sends update index command to server to add index to object's list
  \li Server sends internal index command to index's shard specific for object
  \li Server at index's shard adds object to index's list, checks if limit is reached, removes
  the oldest objects if needed (lookup for such objects is linear, but it doesn't matter as reading/writing
  of shard's list of objects is already linear)
  \li Server notifies client about all removed objects
  \li Client removes data of removed objects if needed (remove_data argument passed to function is true)
*/
