                   Elliptics network project
	   http://www.ioremap.net/projects/elliptics
               Evgeniy Polyakov <zbr@ioremap.net>


          IO storage backends requirements and design


IO storage backend is the lowest layer in the elliptics hierarchy. It is responsible
for the actual data storing, thus it has to be able to process transactions and parse
commands.

So, for the reference, a short description of the elliptics protocol.
Each packet in the elliptics network contains at least two global parts:
main header and one or more attributes.

All structure fields are sent (and stored in the backend) in little endian format
and have to be converted before used via special helpers.

If not noted specially, all sizes have to be checked by the backend to be valid,
i.e. not go outside of the provided buffers.


Main header (struct dnet_cmd).
------------------------------
This structure is used to specify transaction ID of the all inner attributes
(or commands), processing flags (like ACK request for given transaction or flag,
specifying that transaction reply was split into multiple packets and this is
the last one (or not the last)), ID of the transaction, completion status
(filled in replies only) and size of the inner data (not counting size of the
main header, i.e. structure you read about).

Attributes or commands (struct dnet_attr).
------------------------------------------
Each attribute structure represents a command to be processed in the given transaction.
It may or may not contain additional data (this can be determined by checking its
size field), data processing flags and command itself.

Only several commands are mandatory in the protocol
(described in include/dnet/packet.h) and have to be understood by the backend
(see examples in example/*_backend.c files), all others may or may not be supported
by the backend in question. For example remote command execution may be only supported
by the private implementation of the storage.


This document describes mandatory IO commands which have to be supported by every
IO backend to be able to work in the elliptics network.


DNET_CMD_WRITE
--------------
This command is used to specify data to be stored on the given node.
Attribute size has to match size of the data plus size of the dnet_io_attr structure,
which describes IO pattern.

It includes data size, offset to be placed at and flags. Two other fields are ID of the
main object this transaction belongs to (parent field) and ID of the transaction
itself (id field). If it is a stand-alone transaction, the latter is not used.

Example for the data write into some file: 'parent' field will contain transformed
file name, and 'id' field will contain ID of the transformed data. Size will specify
number of attached bytes, offset will be set to the offset in the updated file this
data was placed at.

Storage backend should check that attribute size matches data size specified in
dnet_io_attr and size of this structure.

DNET_CMD_READ
-------------
When size specified in dnet_io_attr structure equals to zero, this means that the
whole object has to be returned back to the client. It is possible that requested
size and offset will be out of the object range (for example when stored object
corresponds to 100-200 bytes range, but requested offset is 300) or partially cross.
To rule this case out there is a helper dnet_backend_check_get_size() which will
take dnet_io_attr attribute structure and size of the stored record, and return
size to be read from the given record and pushed back to the client. If it is zero,
nothing should be returned, likely because request is out of range.

Each reply (weather it is read data reply or anything else) should include
at least original transaction number with the special DNET_TRANS_REPLY bit set.
Its ID usually should match the request one. There are special helpers to deal with it.
