                   Elliptics network project
	   http://www.ioremap.net/projects/elliptics
               Evgeniy Polyakov <zbr@ioremap.net>

This document describes high-level design of the elliptics distributed network storage,
its behaviour in different conditions and main states of the nodes and its relations
with the others.

First, some exaplination on what it is and what problems it is supposed to fix.

Elliptics network is a parallel distributed network storage. It allows to group a
number of servers into single object storage with flat namespace indexed by the unified
IDs. Elliptics network provides an open protocol to store and retrieve the data and
perform administrative steps. It can also be infinitely extended to support private
extensions needed for the particular solutions. One of the implemented examples is
a remote command execution, which can be used as a load balancing job manager.

Elliptics network does not contain dedicated metadata servers, all nodes play exactly
the same single role - data storage and request forwarding to another nodes if needed.

Nodes can be organized into groups, which may represent physically dedicated datacenters
for example.


Network addressing.
-------------------
The network uses unified ring of the IDs where each new node will get a random set of IDs
according to free space (or one can generate ID file by hands and specify IDs he likes).
After selecting IDs and joining the network (saying its neighbours in the
ring that they have a new member) node will store data which has IDs more or equal
to the one associated with the node. Routing protocol manages request forwarding,
so each node should store data with greater or equal than own ID and less than
the next one in the ring.

ID in the elliptics network can be created from the data content, names, database
indexes or whatever you want. By default elliptics uses sha512 to generate ID for
the data blocks.
ID can also be created as some internal to application object like database index
or row entry in the table.


IO transactions.
----------------
Each IO operation can be wrapped into transaction (this is done automatically in
all exported functions). Transaction is a low-level entity which contains set of
commands processed atomically. When transaction receives a positive (zero status)
acknowledge (can be turned off for some requests if needed), it means that all
specified operations were completed successfully. Otherwise (usually negative error
status corresponding to the errno or other low-level error) means that one or another
operation failed and the whole transaction failed.
In this case client may try different recovery strategies described below.

Each object contains a history of updates, where each update is a separate transaction
stored somewhere in the network. By using transaction history it is possible to
recreate any object in its previous state providing snapshotting mechanism. One can
also fetch multiple transactions from the history log in parallel increasing IO
performance.


No need for metadata servers.
-----------------------------
Elliptics network does not need special metadata servers to manage ID to object
mapping, this is done automatically in applications by using name or content hash
to determine node which should manage given object.


Maintaining the data redundancy.
--------------------------------
Elliptics network uses server groups to maintain data redundancy.

Client can specify which groups to use for data processing, for example which groups
should host to be written data or which groups can be used to fetch it.

It is also possible to specify automatic group selection during write. For example
we can connect to 10 server groups and only want to write 3 copies. Automatic selection
will find 3 groups and return them to the client. Elliptics sorts groups according
to free space.

Write functions either return number of transactions written or invoke clien't callback
with appropriate completion status. Reading will automatically switch between groups
when object is not present in one of them.

It is also possible in fcgi frontend to sort groups to read data according to LA,
i.e. client will fetch data from the node with smallest average load.


Frontend and backend modular approach.
--------------------------------------
Since protocol is opened it is possible to implement different frontends for the
storage, namely POHMELFS (http://www.ioremap.net/projects/pohmelfs) is a developed
POSIX parallel distributed filesystem. It is possible to use elliptics features with
the existing applications which use POSIX system calls like open(), read(), write()
and so on.

Data is not stored by the elliptics network as is, instead it is provided to the
lowest layer where IO storage backends live. Backend is responsible for processing real
IO requests like data read and write. It can store data wherever it wants and perform
additional steps if needed. For example it can store transaction in the database
and update exported index by which it can be fetched by the elliptics-unaware
appication.

Multiple IO storage backends are supported by the example application server.

File backend, where each transaction is stored as separated file in the root
directory (actually in subdir, indexed by the first by of the command ID).

Eblob backend, which stores data in huge data blobs with index locked in memory.
This allows to perform O(1) lookup and use only single seek to get data from disk.
One can find more details on eblob homepage: http://www.ioremap.net/projects/eblob
